Раздел 1. Основные принципы алгоритмизации и

программирования

Тема 1.1 Введение в прикладное программирование

Прежде, чем перейти к введению в Java-программирование, разберёмся, что это за такой язык программирования. Немного истории. Был разработан компанией Sun Microsystems, создателем которого был Джеймсом Гослинг, и выпущен в 1995 году в качестве основных компонентов компании Sun Microsystems - Java платформ (Java 1.0 [J2SE]).

С развитием Java, и её широкой популярностью, несколько конфигураций

были построены для различных типов платформ. Например: J2EE приложения для предприятий, J2МЕ -для мобильных приложений. - Sun Microsystems переименовала прежнюю версию J2 и ввела новые: Java SE, Java EE и Java ME. Введение в программирование Java различных версий подтверждало знаменитый слоган запускается везде». компании «Написанное однажды,

История создания языка Java

История создания языка Java начинается в июне 1991 года, когда Джеймс Гослинг создал проект для использования в одном из своих многочисленных сет-топ проектов. Язык, который рос вне офиса Гослинга, как дуб, Oak - первоначальное название Java до 1995 года, после в дальнейшем история Java продолжалась под именем Green, а позже был переименован как Java.

Но официально год создания языка Java считается 1995 после выпуска компанией Sun первой реализации Java 1.0. Она гарантировала «Написанное однажды, запускается везде», обеспечивая недорогой стоимостью популярных платформах. На

13 ноября 2006 года, Sun выпустила большую часть как свободное и открытое программное обеспечение в соответствии с условиями GNU General Public License (GPL).

После 8 мая 2007 года судьба Java сложилась иначе. Компания завершила процесс, делая все чтобы исходный код был бесплатным и открытым, кроме небольшой части кода, на который компания не имела авторских прав.

В программировании язык Java:

Объектно-ориентированный: в Java все является объектом. Дополнение может быть легко расширено, так как он основан на обьектной модели.

Платформонезависимый: в отличие от многих других языков, включая С и C++, Java, когда был создан, он не компилировался в платформе конкретной машины, а в независимом от платформы байт-коде. Этот байт код распространяется через интернет и интерпретируется в Java Virtual Machine (JVM), на которой он в настоящее время работает.

Простой: процессы изучение и введение в язык программирование Java остаются простыми. Если Вы понимаете основные концепции объектно- ориентированного программирования, то он будет прост для Вас в освоении.

Безопасным: методы проверки подлинности основаны на шифровании с

открытым ключом.

Архитектурно-нейтральным: компилятор генерирует архитектурно- нейтральные объекты формата файла, что делает скомпилированный код исполняемым на многих процессорах, с наличием системе Java Runtime.

Портативный: архитектурно-нейтральный и не имеющим зависимости от реализации аспектов спецификаций, все это делает Java портативным. Компилятор в Java написан на ANSI C с чистой переносимостью, который является подмножеством POSIX

Прочный: выполняет усилия, чтобы устранить ошибки в различных ситуациях, делая упор в основном на время компиляции, проверку ошибок и проверку во время выполнения.

Многопоточный: функции многопоточности, можно писать программы, которые могут выполнять множество задач одновременно. Введение в язык Java этой конструктивной особенности позволяет разработчикам создавать отлаженные интерактивные приложения.

Интерпретированный: Java байт-код переводится на лету в машинные инструкции и нигде не сохраняется. Делая процесс более быстрым и аналитическим, поскольку связывание происходит как дополнительное с небольшим весом процесса.

Высокопроизводительный: введение позволило получить высокую производительность. Just-In-Time компилятора,

Распространенный: предназначен для распределенной среды интернета. Динамический: программирование на Java считается более динамичным, чем на С или С++, так как он предназначен для адаптации к меняющимся условиям. Программы могут выполнять обширное количество во время обработки информации, которая может быть использована для проверки и разрешения доступа к объектам на время выполнения.